{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How `linearsolve` works"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The ``linearsolve.model`` class\n",
    "-------------------------------\n",
    "\n",
    "The equilibrium conditions for most DSGE models can be expressed as a vector function :math:`F`:\n",
    "\n",
    ".. math::\n",
    "   f(E_t X_{t+1}, X_t, \\epsilon_{t+1}) = 0,\n",
    "   :label: \n",
    "\n",
    "where 0 is an :math:`n\\times 1` vector of zeros, :math:`X_t` is an :math:`n\\times 1` vector of endogenous variables, and :math:`\\epsilon_{t+1}` is an :math:`m\\times 1` vector of exogenous structural shocks to the model. :math:`E_tX_{t+1}` denotes the expecation of the :math:`t+1` endogenous variables based on the information available to decision makers in the model as of time period :math:`t`. \n",
    "\n",
    "The function :math:`f` is often nonlinear. Because the values of the endogenous variables in period :math:`t` depend on the expected future values of those variables, it is not in general possible to compute the equilibirum of the model by working directly with the function :math:`f`. Instead it is often convenient to work with a log-linear approximation to the equilibrium conditions around a non-stochastic steady state. In many cases, the log-linear approximation can be written in the following form:\n",
    "\n",
    ".. math::\n",
    "   A E_t\\left[ x_{t+1} \\right] & = B x_t + \\left[ \\begin{array}{c} \\epsilon_{t+1} \\\\ 0 \\end{array} \\right],\n",
    "   :label:\n",
    "\n",
    "where the vector :math:`x_{t}` denotes the log deviation of the variables in :math:`X_t` from their steady state values. The variables in :math:`x_t` are grouped in a specific way: :math:`x_t = [s_t; u_t]` where :math:`s_t` is an :math:`n_s \\times 1` vector of predetermined (state) variables and :math:`u_t` is an :math:`n_u \\times 1` vector of nonpredetermined (forward-looking) variables. :math:`\\epsilon_{t+1}` is an :math:`n_s\\times 1` vector of i.i.d. shocks to the state variables :math:`s_{t+1}`.  :math:`\\epsilon_{t+1}` has mean 0 and diagonal covariance matrix :math:`\\Sigma`. The solution to the model is a pair of matrices :math:`F` and :math:`P` such that:\n",
    "\n",
    ".. math::\n",
    "   s_{t+1} &= Ps_t + \\epsilon_{t+1}\\\\\n",
    "\n",
    ".. math::\n",
    "   s_{t+1} = Ps_t + \\epsilon_{t+1}.\n",
    "   :label:\n",
    "\n",
    "The matrices :math:`F` and :math:`P` are obtained using the `Klein (2000)`_. solution method which is based on the generalized Schur factorization of the marices :math:`A` and :math:`B`. The solution routine incorporates many aspects of his program for Matlab `solab.m`_.\n",
    "\n",
    ".. _Klein (2000): http://www.sciencedirect.com/science/article/pii/S0165188999000457\n",
    ".. _solab.m: http://paulklein.ca/newsite/codes/codes.php\n",
    "\n",
    "This package defines a `linearsolve.model` class. An instance of the `linearsolve.model` has the following methods:\n",
    "\n",
    "1. ``compute_ss(guess,method,options)``: Computes the steady state of the nonlinear model.\n",
    "2. ``set_ss(steady_state)``: Sets the steady state ``.ss`` attribute of the instance.\n",
    "3. ``log_linear_approximation(steady_state,isloglinear)``: Log-linearizes the nonlinear model and constructs the matrices :math:`A` and :math:`B`.\n",
    "4. ``klein(a,b)``: Solves the linear model using Klein's solution method.\n",
    "5. ``approximate_and_solve(isloglinear)``: Approximates and solves the model by combining the previous two methods.\n",
    "6. ``impulse(T,t0,shock,percent)``: Computes impulse responses for shocks to each endogenous state variable.\n",
    "7. ``approximated(round,precision)``: Returns a string containing the log-linear approximation to the equilibrium conditions of the model.\n",
    "8. ``solved(round,precision)``: Returns a string containing the solution to the log-linear approximation of the model.\n",
    "\n",
    "In this notebook, I demonstrate how to use the module to simulate two basic business cycle models: an real business cycle (RBC) model and a new-Keynesian business cycle model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
